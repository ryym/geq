package codegen

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"go/types"
	"os"
	"path/filepath"
	"slices"
	"strings"
	"text/template"
	"unicode"

	"golang.org/x/tools/go/packages"
)

const autoGenWarning = `
// Code generated by geq. DO NOT EDIT.
// https://github.com/ryym/geq
`

func loadPkgs(cfg *packages.Config, patterns ...string) ([]*packages.Package, error) {
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		return nil, fmt.Errorf("failed to load packages: %w", err)
	}
	if packages.PrintErrors(pkgs) > 0 {
		return nil, errors.New("failed to load packages")
	}
	if len(pkgs) == 0 {
		return nil, errors.New("no Go package found")
	}
	return pkgs, nil
}

func lookupStruct(pkg *packages.Package, name string) (strct *types.Struct, err error) {
	obj := pkg.Types.Scope().Lookup(name)
	if obj == nil {
		return nil, fmt.Errorf("no %s struct found", name)
	}
	strct, ok := obj.Type().Underlying().(*types.Struct)
	if !ok {
		return nil, fmt.Errorf("%s must be struct", name)
	}
	return strct, nil
}

func parseGeqConfig(pkg *packages.Package, fileNames []string, configKeys []string) (m map[string]string, err error) {
	m = make(map[string]string, 0)
	for i, f := range pkg.GoFiles {
		fileName := filepath.Base(f)
		if slices.Contains(fileNames, fileName) {
			for _, group := range pkg.Syntax[i].Comments {
				for _, c := range group.List {
					for _, key := range configKeys {
						_, ok := m[key]
						if ok {
							return nil, fmt.Errorf("duplicate config %s in %s", key, fileName)
						}
						m[key] = readGeqConfigValue(key, c.Text)
					}
				}
			}
		}
	}
	return m, nil
}

func readGeqConfigValue(key, line string) string {
	prefix := "//" + key
	if !strings.HasPrefix(line, prefix) {
		return ""
	}
	rest := line[len(prefix):]
	return strings.TrimSpace(rest)
}

func buildGoCode(name string, codeTmpl string, data any) (src []byte, err error) {
	tmpl := template.Must(template.New(name).Parse(codeTmpl))
	buf := new(bytes.Buffer)
	_, err = buf.WriteString(autoGenWarning)
	if err != nil {
		return nil, fmt.Errorf("failed to write warning header: %w", err)
	}

	err = tmpl.Execute(buf, data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate Go code: %w", err)
	}

	src, err = format.Source(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("failed to format Go code: %w", err)
	}
	return src, nil
}

func absPath(wd string, path string) string {
	if filepath.IsAbs(path) {
		return filepath.Clean(path)
	}
	return filepath.Join(wd, path)
}

func writeFile(dir, fileName string, content []byte) (err error) {
	file, err := os.Create(filepath.Join(dir, fileName))
	if err != nil {
		return fmt.Errorf("failed to create %s: %w", fileName, err)
	}
	defer file.Close()

	_, err = file.Write(content)
	if err != nil {
		return fmt.Errorf("failed to write %s: %w", fileName, err)
	}

	return nil
}

func toSnake(s string) string {
	if s == "" {
		return s
	}

	src := []rune(s)
	out := []rune{unicode.ToLower(src[0])}
	lastIdx := len(src) - 1
	for i := 1; i <= lastIdx; i++ {
		if unicode.IsUpper(src[i]) {
			if !unicode.IsUpper(src[i-1]) || (i < lastIdx && !unicode.IsUpper(src[i+1])) {
				out = append(out, '_')
			}
			out = append(out, unicode.ToLower(src[i]))
		} else {
			out = append(out, src[i])
		}
	}

	return string(out)
}
