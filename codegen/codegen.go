package codegen

import (
	"bytes"
	"errors"
	"fmt"
	"go/format"
	"go/types"
	"os"
	"path/filepath"
	"text/template"

	"golang.org/x/tools/go/packages"
)

type Config struct {
	RootPath string
}

func Run(cfg *Config) (err error) {
	cwd, err := os.Getwd()
	if err != nil {
		return fmt.Errorf("failed to get current working directory: %w", err)
	}

	bldPaths := make([]string, 0)
	rowsPaths := make([]string, 0)
	filepath.Walk(cfg.RootPath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		switch info.Name() {
		case "geqbld.go":
			bldPaths = append(bldPaths, absPath(cwd, filepath.Dir(path)))
		case "geqrows.go":
			rowsPaths = append(rowsPaths, absPath(cwd, filepath.Dir(path)))
		}
		return nil
	})

	err = genRowsFiles(rowsPaths)
	if err != nil {
		return err
	}

	return nil
}

func genBuilderPkgs(bldPaths []string) (err error) {
	pkgCfg := &packages.Config{Mode: packages.NeedFiles | packages.NeedTypes}
	pkgs, err := loadPkgs(pkgCfg, bldPaths...)
	if err != nil {
		return err
	}
	for _, pkg := range pkgs {
		fmt.Println("geqbld.go in", pkg.ID)
		err = genBuilderPkg(pkg)
		if err != nil {
			return fmt.Errorf("builder generation failed at: %s: %w", pkg.ID, err)
		}
	}
	return nil
}

func genRowsFiles(rowsPaths []string) (err error) {
	pkgCfg := &packages.Config{Mode: packages.NeedName | packages.NeedFiles | packages.NeedTypes | packages.NeedSyntax}
	for _, rowsPath := range rowsPaths {
		pkgs, err := loadPkgs(pkgCfg, rowsPath)
		if err != nil {
			return err
		}
		pkg := pkgs[0]
		err = genRowsFile(rowsPath, pkg)
		if err != nil {
			return fmt.Errorf("row mappers generation failed at: %s: %w", pkg.ID, err)
		}
	}
	return nil
}

func loadPkgs(cfg *packages.Config, patterns ...string) ([]*packages.Package, error) {
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		return nil, fmt.Errorf("failed to load packages: %w", err)
	}
	if packages.PrintErrors(pkgs) > 0 {
		return nil, errors.New("failed to load packages")
	}
	if len(pkgs) == 0 {
		return nil, errors.New("no Go package found")
	}
	return pkgs, nil
}

func genBuilderPkg(pkg *packages.Package) (err error) {
	tablesObj := pkg.Types.Scope().Lookup("GeqTables")
	if tablesObj == nil {
		return errors.New("no GeqTables struct found")
	}
	tablesStruct, ok := tablesObj.Type().Underlying().(*types.Struct)
	if !ok {
		return errors.New("GeqTables must be struct")
	}
	for i := 0; i < tablesStruct.NumFields(); i++ {
		field := tablesStruct.Field(i)
		fieldTypeNamed, ok := field.Type().(*types.Named)
		if !ok {
			return fmt.Errorf("type of GeqTables field %s is invalid", field.Name())
		}
		fieldType := fieldTypeNamed.Obj()
		fmt.Println(field.Name(), fieldType.Name(), fieldType.Pkg().Path())
	}

	return nil
}

func absPath(wd string, path string) string {
	if filepath.IsAbs(path) {
		return filepath.Clean(path)
	}
	return filepath.Join(wd, path)
}

func buildGoCode(name string, codeTmpl string, data any) (src []byte, err error) {
	tmpl := template.Must(template.New(name).Parse(codeTmpl))
	buf := new(bytes.Buffer)
	_, err = buf.WriteString(autoGenWarning)
	if err != nil {
		return nil, fmt.Errorf("failed to write warning header: %w", err)
	}

	err = tmpl.Execute(buf, data)
	if err != nil {
		return nil, fmt.Errorf("failed to generate rows file: %w", err)
	}

	src, err = format.Source(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("failed to format rows file: %w", err)
	}
	return src, nil
}

const autoGenWarning = `
// Code generated by geq. DO NOT EDIT.
// https://github.com/ryym/geq
`
